% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/chess_s3_object-setters.R
\name{subset_mutations}
\alias{subset_mutations}
\title{#' Title
#'
#' @param s 
#'
#' @return
#' @export
#'
#' @examples
add_cn_states = function(s, , seed=123) {
  
  # -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
  # Alternative config ####
  # -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
  
  if (isTRUE(f == "WES")) {
    f = 0.011 # 1.1%
  }
  
  # -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
  # Check arguments
  # -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
  
  al = checkmate::makeAssertCollection()
  if (is.data.frame(s)) {
    checkmate::assertTRUE("id" %in% colnames(s), add=al)
  } else {
    checkmate::assertClass(s, "CHESS_S3", add=al)
  }
  checkmate::assertNumeric(f, lower=0, upper=1, len=1, any.missing=FALSE, add=al)
  checkmate::reportAssertions(al)
  
  # -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
  # Subset mutation data ####
  # -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
  
  w = c(f, 1-f) # weight
  
  if (is.data.frame(s)) {
    
    # data.frame
    s = s %>% dplyr::filter(mutation_id_to_state(id, weight=w, seed=seed) == 1)
    
  } else {
    
    # CHESS S3 object
    for (i in seq_along(s$samples)) {
      s$samples[[i]]$mutation_data = 
        s$samples[[i]]$mutation_data %>% 
        dplyr::filter(mutation_id_to_state(id, weight=w, seed=seed) == 1)
      
      s$samples[[i]]$number_mutations = 
        NROW(s$samples[[i]]$mutation_data)
    }
    
  }
  
  
}
Random sampling of mutations}
\usage{
subset_mutations(s, f, seed = 123)
}
\arguments{
\item{s}{CHESS S3 object.}

\item{f}{Numeric value defining fraction of variants to keep (0<f<=1). Alternative options: "WES": whole-exome sequencing, i.e. 1.1%.}

\item{seed}{(optional) seed to use for random subsetting (default: 123).}
}
\value{

}
\description{
#' Title
#'
#' @param s 
#'
#' @return
#' @export
#'
#' @examples
add_cn_states = function(s, , seed=123) {
  
  # -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
  # Alternative config ####
  # -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
  
  if (isTRUE(f == "WES")) {
    f = 0.011 # 1.1%
  }
  
  # -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
  # Check arguments
  # -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
  
  al = checkmate::makeAssertCollection()
  if (is.data.frame(s)) {
    checkmate::assertTRUE("id" %in% colnames(s), add=al)
  } else {
    checkmate::assertClass(s, "CHESS_S3", add=al)
  }
  checkmate::assertNumeric(f, lower=0, upper=1, len=1, any.missing=FALSE, add=al)
  checkmate::reportAssertions(al)
  
  # -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
  # Subset mutation data ####
  # -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
  
  w = c(f, 1-f) # weight
  
  if (is.data.frame(s)) {
    
    # data.frame
    s = s %>% dplyr::filter(mutation_id_to_state(id, weight=w, seed=seed) == 1)
    
  } else {
    
    # CHESS S3 object
    for (i in seq_along(s$samples)) {
      s$samples[[i]]$mutation_data = 
        s$samples[[i]]$mutation_data %>% 
        dplyr::filter(mutation_id_to_state(id, weight=w, seed=seed) == 1)
      
      s$samples[[i]]$number_mutations = 
        NROW(s$samples[[i]]$mutation_data)
    }
    
  }
  
  
}
Random sampling of mutations
}
